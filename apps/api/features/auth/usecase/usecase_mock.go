// Code generated by mockery v2.30.1. DO NOT EDIT.

package usecase

import (
	mock "github.com/stretchr/testify/mock"
	requests "github.com/vasapolrittideah/smokefree/apps/api/features/auth/requests"
	models "github.com/vasapolrittideah/smokefree/apps/api/models"
)

// MockAuthUseCase is an autogenerated mock type for the AuthUseCase type
type MockAuthUseCase struct {
	mock.Mock
}

type MockAuthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUseCase) EXPECT() *MockAuthUseCase_Expecter {
	return &MockAuthUseCase_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function with given fields: payload
func (_m *MockAuthUseCase) SignIn(payload requests.SignInRequestBody) (*Token, error) {
	ret := _m.Called(payload)

	var r0 *Token
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.SignInRequestBody) (*Token, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(requests.SignInRequestBody) *Token); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Token)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.SignInRequestBody) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockAuthUseCase_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - payload requests.SignInRequestBody
func (_e *MockAuthUseCase_Expecter) SignIn(payload interface{}) *MockAuthUseCase_SignIn_Call {
	return &MockAuthUseCase_SignIn_Call{Call: _e.mock.On("SignIn", payload)}
}

func (_c *MockAuthUseCase_SignIn_Call) Run(run func(payload requests.SignInRequestBody)) *MockAuthUseCase_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.SignInRequestBody))
	})
	return _c
}

func (_c *MockAuthUseCase_SignIn_Call) Return(_a0 *Token, _a1 error) *MockAuthUseCase_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_SignIn_Call) RunAndReturn(run func(requests.SignInRequestBody) (*Token, error)) *MockAuthUseCase_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: payload
func (_m *MockAuthUseCase) SignUp(payload requests.SignUpRequestBody) (*models.Account, error) {
	ret := _m.Called(payload)

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.SignUpRequestBody) (*models.Account, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(requests.SignUpRequestBody) *models.Account); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.SignUpRequestBody) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockAuthUseCase_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - payload requests.SignUpRequestBody
func (_e *MockAuthUseCase_Expecter) SignUp(payload interface{}) *MockAuthUseCase_SignUp_Call {
	return &MockAuthUseCase_SignUp_Call{Call: _e.mock.On("SignUp", payload)}
}

func (_c *MockAuthUseCase_SignUp_Call) Run(run func(payload requests.SignUpRequestBody)) *MockAuthUseCase_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.SignUpRequestBody))
	})
	return _c
}

func (_c *MockAuthUseCase_SignUp_Call) Return(_a0 *models.Account, _a1 error) *MockAuthUseCase_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_SignUp_Call) RunAndReturn(run func(requests.SignUpRequestBody) (*models.Account, error)) *MockAuthUseCase_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUseCase creates a new instance of MockAuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUseCase {
	mock := &MockAuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
