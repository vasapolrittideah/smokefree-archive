// Code generated by mockery v2.30.1. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/vasapolrittideah/smokefree/apps/api/models"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: account
func (_m *MockAccountRepository) CreateAccount(account models.Account) (models.Account, error) {
	ret := _m.Called(account)

	var r0 models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Account) (models.Account, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(models.Account) models.Account); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	if rf, ok := ret.Get(1).(func(models.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - account models.Account
func (_e *MockAccountRepository_Expecter) CreateAccount(account interface{}) *MockAccountRepository_CreateAccount_Call {
	return &MockAccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", account)}
}

func (_c *MockAccountRepository_CreateAccount_Call) Run(run func(account models.Account)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Account))
	})
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) Return(_a0 models.Account, _a1 error) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) RunAndReturn(run func(models.Account) (models.Account, error)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockAccountRepository) GetByEmail(email string) (models.Account, error) {
	ret := _m.Called(email)

	var r0 models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Account, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.Account); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockAccountRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAccountRepository_Expecter) GetByEmail(email interface{}) *MockAccountRepository_GetByEmail_Call {
	return &MockAccountRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockAccountRepository_GetByEmail_Call) Run(run func(email string)) *MockAccountRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAccountRepository_GetByEmail_Call) Return(account models.Account, err error) *MockAccountRepository_GetByEmail_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetByEmail_Call) RunAndReturn(run func(string) (models.Account, error)) *MockAccountRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
